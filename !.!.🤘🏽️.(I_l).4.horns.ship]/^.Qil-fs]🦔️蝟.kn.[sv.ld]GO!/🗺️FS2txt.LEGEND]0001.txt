//🦸🏿‍♀️️[superblock, groupdescriptors,reserved GDT blocks ] < unmoving

//🦹🏿‍♀️️[block bitmaps][inode bitmaps][inode tables][datablocks]<move

👨‍🏫️]WEEKEND JUST GO FAST PUT w/e U NEED + emty space

[boot|Superblok|Blokbitmap 1or0|inode table|DataBloks(<->)]
[boot|Superblok|Blokbitmap (1bit-perBlok 1=free=0alloc)|inode table (info able file)|DataBloks(<->)]

🏢️🏢️🏢️🏢️[OFFSETS]
🦸🏿‍♀️️
[OFFSET.static🦸🏿‍♀️️]
SuperBlock = "256"(bytes)<should be enuf {is actually 264-760->MT}
[OFFSET.static🦸🏿‍♀️️]
GroupDescriptors = "20" bytes (can surely use less
🦸🏿‍♀️️
🦹🏿‍♀️️
[OFFSET.dynamic🦹🏿‍♀️️]
[block bitmaps]  = std block size [256/512 w/e ]💉️
[OFFSET.dynamic🦹🏿‍♀️️]
[inode bitmaps] =  std block size [256/512 w/e ]💉️
[OFFSET.dynamic🦹🏿‍♀️️]
[inode tables] = "128"(bytes) [116]
[OFFSET.dynamic🦹🏿‍♀️️]
[datablocks] = std block size [256/512 w/e ]💉️
🦹🏿‍♀️️

📮️
🅱️BG seems pretty important. might as well give it its own "block right away"
(we only need 1 after all)🅱️
🩸️
3.2. Block Group Descriptor Table

    3.2.1. bg_block_bitmap
    3.2.2. bg_inode_bitmap
    3.2.3. bg_inode_table
    3.2.4. bg_free_blocks_count
    3.2.5. bg_free_inodes_count
    3.2.6. bg_used_dirs_count
    3.2.7. bg_pad
    3.2.8. bg_reserved
    🩸️
🏢️🏢️🏢️🏢️
🚣🏼‍♂️️
📖️
https://cscie28.dce.harvard.edu/lectures/lect04/6_Extras/ext2-struct.html
📖️
+(shows were "bytes go" (not as robust);
u may rather use this while u can
📖️
https://wiki.osdev.org/Ext2
📖️
🚣🏼‍♂️️




//🦸🏿‍♀️️[superblock, groupdescriptors,reserved GDT blocks ] < unmoving

//🚧️ext superblock structure = 
3.1. Superblock

    3.1.1. s_inodes_count
    3.1.2. s_blocks_count
    3.1.3. s_r_blocks_count
    3.1.4. s_free_blocks_count
    3.1.5. s_free_inodes_count
    3.1.6. s_first_data_block
    3.1.7. s_log_block_size
    3.1.8. s_log_frag_size
    3.1.9. s_blocks_per_group
    3.1.10. s_frags_per_group
    3.1.11. s_inodes_per_group
    3.1.12. s_mtime
    3.1.13. s_wtime
    3.1.14. s_mnt_count
    3.1.15. s_max_mnt_count
    3.1.16. s_magic
    3.1.17. s_state
    3.1.18. s_errors
    3.1.19. s_minor_rev_level
    3.1.20. s_lastcheck
    3.1.21. s_checkinterval
    3.1.22. s_creator_os
    3.1.23. s_rev_level
    3.1.24. s_def_resuid
    3.1.25. s_def_resgid
    3.1.26. s_first_ino
    3.1.27. s_inode_size
    3.1.28. s_block_group_nr
    3.1.29. s_feature_compat
    3.1.30. s_feature_incompat
    3.1.31. s_feature_ro_compat
    3.1.32. s_uuid
    3.1.33. s_volume_name
    3.1.34. s_last_mounted
    3.1.35. s_algo_bitmap
    3.1.36. s_prealloc_blocks
    3.1.37. s_prealloc_dir_blocks
    3.1.38. s_journal_uuid
    3.1.39. s_journal_inum
    3.1.40. s_journal_dev
    3.1.41. s_last_orphan
    3.1.42. s_hash_seed
    3.1.43. s_def_hash_version
    3.1.44. s_default_mount_options
    3.1.45. s_first_meta_bg
//🚧️ext groupdescriptor structure = 
3.2. Block Group Descriptor Table

    3.2.1. bg_block_bitmap
    3.2.2. bg_inode_bitmap
    3.2.3. bg_inode_table
    3.2.4. bg_free_blocks_count
    3.2.5. bg_free_inodes_count
    3.2.6. bg_used_dirs_count
    3.2.7. bg_pad
    3.2.8. bg_reserved
    
    {

*rt	end	size			Field Description
0 	3 	4 	Block address of block usage bitmap
4 	7 	4 	Block address of inode usage bitmap
8 	11 	4 	Starting block address of inode table
12 	13 	2 	Number of unallocated blocks in group
14 	15 	2 	Number of unallocated inodes in group
16 	17 	2 	Number of directories in group
18 	31 	X 	(Unused) 
    }
    
//🦹🏿‍♀️️[block bitmaps][inode bitmaps][inode tables][datablocks]<move
//🚧️ext blckbitmap structure = 
00001111 (just binary{bitmap!});
//🚧️ext inodebitmap structure = 
00001111 (just binary{bitmap!});
//🚧️ext inodetable structure = 
3.5. Inode Table

    3.5.1. i_mode
    3.5.2. i_uid
    3.5.3. i_size
    3.5.4. i_atime
    3.5.5. i_ctime
    3.5.6. i_mtime
    3.5.7. i_dtime
    3.5.8. i_gid
    3.5.9. i_links_count
    3.5.10. i_blocks
    3.5.11. i_flags
    3.5.12. i_osd1
    3.5.13. i_block
    3.5.14. i_generation
    3.5.15. i_file_acl
    3.5.16. i_dir_acl
    3.5.17. i_faddr
    3.5.18. Inode i_osd2 Structure

📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️
>what does a "directory block look like"?
>does a "file" have its own 'header info'?
after all its linked , why would it matter?
📄️

📄️
📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️📂️
//==================HOW 2 ================
//⁉️where does "FILE NAME" go.
//U NEED 2 TREAT /DISK💾️ AS 'ROOT/DIR'
// THEN FILENAMES ARE STORED IN 'DIR BLOX'OPTIONAL HASHING 4
// INSTEAD OF STRING SCAN LOOKUPS *MORE THAN 64 ASCII BITS...😏️
//😍️
//💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️💯️
//https://cscie28.dce.harvard.edu/lectures/lect04/6_Extras/ext2-struct.html 
//https://www.cs.unibo.it/~renzo/doc/so/fs/ext2-walkthrough.pdf
//➕️
//Explains how directory/filenames work <3(at VERY bottom)
//http://www.science.smith.edu/~nhowe/262/oldlabs/ext2.html
//directory is a "data block" *ie file, get it? 
// u will make "root dir file when u make super block , get it?
//*we dont have any "actual files yet"
// 
//=[FIN]
//➕️
// thEsE explains EVERTHING . use thEs.//💯️💯️💯️💯️💯️💯️💯️💯️💯️

//🐠️where are "processes supposed 2 be stored" (like kbd mem etc)
// 🐠️there not "files , like save and load..."
//🐠️theoretically its ur program... so if u wanna make a dir 4 it
// 🐠️ thats on u imo , just like : `sudo cat /tmp/event*.log`
//

//📟️
// u may make a dirchek later that when u restart(load) filesystem
// if u deleted a file/dir "either it deletes from [fs] OR 
// repopulates (re-saves) physically... 
// then u can make cli commands that are auto as well... 
// so just artchitect 4 that upfront.
// process memory can be deleted from temp , it can be reused
// if not deleted (same as file . so thats ur gameplan imo
// its not complicated as it sounds 
//ur doing this anyways.(4save/load)
// temp files can intentionally remain binary 
// but save load files can auto render as ascii (
// then u can get "best of both worlds"
//🗄️{
//that is a process that can run independantly if u wanna
// move fs and get phy output (but u dont need it right now...)
//}🗄️
// just, kiss , since u would hate 2 have 2 rewrite 2 much 4 STRAP
// if u think u can just do "kernel mem with no FS, then 'no files'
// just do it right.
//🔭️(we can always steal lib fx later 4 'c.halo')🔭️
//📟️
//😍️



🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️
any "disk" is just a "FD" (its ONE FUCKING TEXT FILE) 
(if the inode is dumping info , u should beable 2 dump YOUR info
(even search it urself and render it or edit it ? its in binary right? 
or wtf is it in? (can it be CONVERTED 2 binary? , can binary be converted 2 IT?
(this is the elf issue w/o elf just file... )
🔋️need to mount and put in test info , ostensibly its rendering ascii...,
lets go back 2 this... even if u have 2 "do fs bin/hex conversion 
u may not have 2 do "FS" heavy lifting right now  ,and why would u want 2? ;
also just as we understodd this LATER, can we use anyones code now!/yet?
🌊️
#include "inc/inode.h"
#include "inc/directoryentry.h"  // < are files after this?
				//can we access them the same way?(with this code);
🌊️
🔋️
🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️🤯️



________KR

🌐️
https://en.wikipedia.org/wiki/Inode

The inode (index node) is a data structure in a Unix-style file system that describes a file-system object such as a file or a directory. Each inode stores the attributes and disk block locations of the object's data.[1] File-system object attributes may include metadata (times of last change,[2] access, modification), as well as owner and permission data.[3]

A directory is a list of inodes with their assigned names. The list includes an entry for itself, its parent, and each of its children.
🌐️

What is not stored in inode?
Explanation: A filename is not stored in the inode because a file can have multiple filenames. When this happens, we say that the file has more than one link, which means that we can access this file using multiple filenames. The number of links associated with a file can be viewed using ls command.
🌐️
