
#❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️
#THIS SEEMS 2 BE]ON BUT ITS DIFFERENT THAN THE ONES I "MADE FROM SCRATCH"
#its using the "independant "Q" states from the old ones i made, 
#maybe i could fix the new ones just buy using "INdependant "Q" states? 

#📅️ur better off trying 2 fix "THIS ONE" (organize wires) 
#than the other <3 
#📅️seems as if the result was diff cuz we used diff wires "not qstates"
#but just didn't smush wires up as much... look over this and 4 fut ref!

#📅️the wires could probably be a bit cleaner so u can understand this better
#(the pre latch's are in "11's"!(can u at least dial them back right behind starting? ) 

#👨🏽‍🚀️
#i made this so u can still detach and use latch (wire order wise) 
#since ur never gonna detatch and use "pre latch..." w/e but yea 

#u will do "BIT(mux)" like this or anything else that comes "Behind" 
#another chip 
#also . swapping chip yr numbers coulndt be easier if u tried <3 
#👨🏽‍🚀️
#❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️❗️

#🔘️#🔘️#🔘️#🔘️#🔘️
#clock	= 16
0000 0100, 0000 0100, 0000 0011 0000 0011
#switch_0 = 17
0000 0101, 0000 0101,0000 0011 0000 0011
#
#switch_1 = 18
0000 0110, 0000 0110, 0000 0011 0000 0011

#we will always fill these by default or leave mt same diff
#🔘️#🔘️#🔘️#🔘️#🔘️
#CLI 3
0000 0011 0000 00110000 0011,0000 0100
0000 0011 0000 00110000 0011,0000 0101
0000 0011 0000 00110000 0011,0000 0110
########################################

#🪣️ 0001 0011 < 0001 0100
#🍄️
#MUX1 START


#/**
# * Multiplexor:
# * out = a if sel == 0
# *       b otherwise
# */

#CHIP Mux {
#    IN a, b, sel;
#    OUT out;

#####################
#(last number [dff])🪣️ = 0001 0111 #🦢️(fresh swap)
#####################
#24🪡️19 = a in 
0001 1000 #0001 0011 (24)
0000 0011
0000 0011
0000 0101
#25🪡️20 = b in 
0001 1001 #0001 0100 
0000 0011
0000 0011 
0000 0110
#26🪡️21 = sel in 
0001 1010  #0001 0101 
0000 0011
0000 0011 
0000 0100
#27🪡️22 = out
#0001 1011 #0001 0110 🦢️(fin in)
#0000 0011
#0000 0011 , #loop back up here
#???? #????
#    PARTS:
#####################


#    Not(in=sel, out=Notsel);
#28🪡️23 = Notsel
0001 1010 #0001 0111  #🦢️
0000 1000
0000 0011 ,
0001 1010  #0001 0101 #🦢️finot

###################
#CLI STARTERS OUT

0000 0011 0000 00110000 0011,0001 1000
0000 0011 0000 00110000 0011,0001 1010
##################

 #################
   # And(a=a, b=Notsel, out=NotselAnda);
 #29(🪡️24 = And1
0001 1011 #0001 1000,    #🦢️ (tricky cuz same #set!)
 0000 1000, #

 0001 1010 #0001 0111  # < b 💱️(reswaps)
 0001 1000 #0001 0011	# < a 💱️
 
##########&10
 0001 1011 #0001 1000, #🦢️
 0000 1000
 0000 0010 #!
 0001 1011 #0001 1000, #🦢️
 
 #####&!!
  0001 1011 #0001 1000, #🦢️
 0000 1000
 0000 0011 #&
0001 1011 #0001 1000, #🦢️
 #######]}&=ON
 
 #a=a, b=Notsel[cli]ON
 0000 0011 0000 00110000 0011,0001 1011  #]on2! #🦢️
 ###########################################
 
 #&++
#|   a   |   b   |  out  |
#|   0   |   0   |   0   |
#|   0   |   1   |   0   |  # = high z out. 
#|   1   |   0   |   0   |  # = GOOD 
#|   1   |   1   |   1   |

 #  And(a=b, b=sel, out=selAndb);
   #################
 #30🪡️25 = And2 #🦢️
0001 1001,
 0000 1000, #🪢️

 0001 0101   # < b
 0001 0100 	# < a
 
##########&z
 0001 1001,
 0000 1000
 0000 0010 #!
 0001 1001,
 
 #####&!
  0001 1001,
 0000 1000
 0000 0011 #&
0001 1001
 #######]}&=OFF
  #And(a=b, b=sel[cli]OFF
 #0000 0011 0000 00110000 0011,0001 1001]on2

   # Or(a=NotselAnda, b=selAndb, out=out);
 # its 2nots and nand = 5 
 #🪡️26 = or.

#
#📅️OR ACTUALLY ISN"T WORKING AS !!@...📅️
0000 0011 0000 00110000 0011,0001 1000
0000 0011 0000 00110000 0011,0001 1001
 #!a
 0001 1000,  0000 1000 0000 0011 , 0001 1000,
 #!b
 0001 1001 0000 1000 0000 0011 , 0001 1001
 
 0000 0011 0000 00110000 0011, 0001 1000,
0000 0011 0000 00110000 0011,0001 1001
 #################@
0001 1010  #🪡️26
 0000 1000, 

 0001 1001  # < b
 0001 1000	# < a
 
##########NOT(no not here for "OR"tx...weird...
 
0001 1010
0000 1000, 
 0000 0010 #
 0001 1010
 ################@
#CLI out
0000 0011
0000 0011
0000 0011 

0001 1010
#

#mux
#|   a   |   b   |  sel  |  out  |
#|   0   |   0   |   0   |   0   |
#|   0   |   0   |   1   |   0   |
#|   0   |   1   |   0   |   0   |
#|   0   |   1   |   1   |   1   | #off?no(clk is last
#|   1   |   0   |   0   |   1   | 
#|   1   |   0   |   1   |   0   |
#|   1   |   1   |   0   |   1   |
#|   1   |   1   |   1   |   1   |

 #}MUX]NU]ON
#🍄️
#👾️BIT👾️👾️👾️👾️👾️👾️👾️👾️👾️
#/**
# * 1-bit register:
# * If load[t] == 1 then out[t+1] = in[t]
# *                 else out does not change (out[t+1] = out[t])
# */

#CHIP Bit {
#    IN in, load;
#    OUT out;

#    PARTS:
#    Mux(a=out1, b=in, sel=load, out=outm);]DONE
#    DFF(in=outm, out=out1, out=out);]GO  
#}
#################👾️TRUTH TABLE
#https://github.com/ryo0/nand2tetris/blob/master/project3/a/Bit.cmp
#👾️👾️👾️👾️👾️👾️👾️👾️👾️👾️👾️👾️

###########################################

#⏲️
#DFF NAND CLOCKED

#D-in 

0001 0100 #0011 0000
0000 0011
0000 0011
0000 0101

#NOT 
0001 0101 #0011 0001
0000 1000,
0000 0011 #
0001 0100



#top nunq(pre latch)A 
0001 0110 #0011 0010
0000 0111

0001 0100 #0011 0000
0000 0100

######################
#bottom nunq(pre latch)B
0001 0111 #0011 0011
0000 0111

0001 0101 #0011 0001
0000 0100

#####################
#(last number)🪣️ = 0001 0111
#####################
#⏲️
#🛅️
######################
#LATCH START 
##########################################################
#a___
0001 0000,
 0000 0011
 0000 0011 #
0001 0110
#b___

0001 0001,
 0000 0011,
 0000 0011 #
0001 0111  #< ur"a'var has to go in "B" if u want it "HI-z'd out"

#################
0001 0010,
 0000 0111, #🪢️

 0001 0011  # < b
 0001 0000	# < a
 

######################


0001 0011,
 0000 0111, #🪢️
 0001 0010  # < b
 0001 0001	# < a
 
 
######################

#pre Qstates
0000 00110000 00110000 0011 0001 0010
#0000 00110000 00110000 0011 0001 0011
#🛅️(last number)🪣️ <is on clock DFF NOT HERE !

 
